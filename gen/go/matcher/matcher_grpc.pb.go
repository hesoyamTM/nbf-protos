// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: matcher/matcher.proto

package matcherv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FormService_CreateForm_FullMethodName    = "/matcher.FormService/CreateForm"
	FormService_GetFormByUser_FullMethodName = "/matcher.FormService/GetFormByUser"
	FormService_UpdateForm_FullMethodName    = "/matcher.FormService/UpdateForm"
	FormService_DeleteForm_FullMethodName    = "/matcher.FormService/DeleteForm"
)

// FormServiceClient is the client API for FormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FormService: CRUD for user forms
type FormServiceClient interface {
	CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFormByUser(ctx context.Context, in *GetFormByUserRequest, opts ...grpc.CallOption) (*Form, error)
	UpdateForm(ctx context.Context, in *UpdateFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteForm(ctx context.Context, in *DeleteFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type formServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormServiceClient(cc grpc.ClientConnInterface) FormServiceClient {
	return &formServiceClient{cc}
}

func (c *formServiceClient) CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FormService_CreateForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetFormByUser(ctx context.Context, in *GetFormByUserRequest, opts ...grpc.CallOption) (*Form, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Form)
	err := c.cc.Invoke(ctx, FormService_GetFormByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) UpdateForm(ctx context.Context, in *UpdateFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FormService_UpdateForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DeleteForm(ctx context.Context, in *DeleteFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FormService_DeleteForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServiceServer is the server API for FormService service.
// All implementations must embed UnimplementedFormServiceServer
// for forward compatibility.
//
// FormService: CRUD for user forms
type FormServiceServer interface {
	CreateForm(context.Context, *CreateFormRequest) (*emptypb.Empty, error)
	GetFormByUser(context.Context, *GetFormByUserRequest) (*Form, error)
	UpdateForm(context.Context, *UpdateFormRequest) (*emptypb.Empty, error)
	DeleteForm(context.Context, *DeleteFormRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFormServiceServer()
}

// UnimplementedFormServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFormServiceServer struct{}

func (UnimplementedFormServiceServer) CreateForm(context.Context, *CreateFormRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForm not implemented")
}
func (UnimplementedFormServiceServer) GetFormByUser(context.Context, *GetFormByUserRequest) (*Form, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormByUser not implemented")
}
func (UnimplementedFormServiceServer) UpdateForm(context.Context, *UpdateFormRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForm not implemented")
}
func (UnimplementedFormServiceServer) DeleteForm(context.Context, *DeleteFormRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForm not implemented")
}
func (UnimplementedFormServiceServer) mustEmbedUnimplementedFormServiceServer() {}
func (UnimplementedFormServiceServer) testEmbeddedByValue()                     {}

// UnsafeFormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServiceServer will
// result in compilation errors.
type UnsafeFormServiceServer interface {
	mustEmbedUnimplementedFormServiceServer()
}

func RegisterFormServiceServer(s grpc.ServiceRegistrar, srv FormServiceServer) {
	// If the following call pancis, it indicates UnimplementedFormServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FormService_ServiceDesc, srv)
}

func _FormService_CreateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).CreateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_CreateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).CreateForm(ctx, req.(*CreateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetFormByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormByUser(ctx, req.(*GetFormByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_UpdateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).UpdateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_UpdateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).UpdateForm(ctx, req.(*UpdateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DeleteForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DeleteForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DeleteForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DeleteForm(ctx, req.(*DeleteFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormService_ServiceDesc is the grpc.ServiceDesc for FormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matcher.FormService",
	HandlerType: (*FormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateForm",
			Handler:    _FormService_CreateForm_Handler,
		},
		{
			MethodName: "GetFormByUser",
			Handler:    _FormService_GetFormByUser_Handler,
		},
		{
			MethodName: "UpdateForm",
			Handler:    _FormService_UpdateForm_Handler,
		},
		{
			MethodName: "DeleteForm",
			Handler:    _FormService_DeleteForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matcher/matcher.proto",
}

const (
	GroupQueryService_GetGroup_FullMethodName         = "/matcher.GroupQueryService/GetGroup"
	GroupQueryService_DeleteGroup_FullMethodName      = "/matcher.GroupQueryService/DeleteGroup"
	GroupQueryService_ListGroupMembers_FullMethodName = "/matcher.GroupQueryService/ListGroupMembers"
)

// GroupQueryServiceClient is the client API for GroupQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GroupQuery: Basic group operations
type GroupQueryServiceClient interface {
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGroupMembers(ctx context.Context, in *ListGroupMembersRequest, opts ...grpc.CallOption) (*ListGroupMembersResponse, error)
}

type groupQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupQueryServiceClient(cc grpc.ClientConnInterface) GroupQueryServiceClient {
	return &groupQueryServiceClient{cc}
}

func (c *groupQueryServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupQueryService_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupQueryServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupQueryService_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupQueryServiceClient) ListGroupMembers(ctx context.Context, in *ListGroupMembersRequest, opts ...grpc.CallOption) (*ListGroupMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupMembersResponse)
	err := c.cc.Invoke(ctx, GroupQueryService_ListGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupQueryServiceServer is the server API for GroupQueryService service.
// All implementations must embed UnimplementedGroupQueryServiceServer
// for forward compatibility.
//
// GroupQuery: Basic group operations
type GroupQueryServiceServer interface {
	GetGroup(context.Context, *GetGroupRequest) (*Group, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error)
	ListGroupMembers(context.Context, *ListGroupMembersRequest) (*ListGroupMembersResponse, error)
	mustEmbedUnimplementedGroupQueryServiceServer()
}

// UnimplementedGroupQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupQueryServiceServer struct{}

func (UnimplementedGroupQueryServiceServer) GetGroup(context.Context, *GetGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupQueryServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupQueryServiceServer) ListGroupMembers(context.Context, *ListGroupMembersRequest) (*ListGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupMembers not implemented")
}
func (UnimplementedGroupQueryServiceServer) mustEmbedUnimplementedGroupQueryServiceServer() {}
func (UnimplementedGroupQueryServiceServer) testEmbeddedByValue()                           {}

// UnsafeGroupQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupQueryServiceServer will
// result in compilation errors.
type UnsafeGroupQueryServiceServer interface {
	mustEmbedUnimplementedGroupQueryServiceServer()
}

func RegisterGroupQueryServiceServer(s grpc.ServiceRegistrar, srv GroupQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupQueryService_ServiceDesc, srv)
}

func _GroupQueryService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupQueryService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupQueryService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupQueryService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupQueryService_ListGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).ListGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupQueryService_ListGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).ListGroupMembers(ctx, req.(*ListGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupQueryService_ServiceDesc is the grpc.ServiceDesc for GroupQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matcher.GroupQueryService",
	HandlerType: (*GroupQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _GroupQueryService_GetGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupQueryService_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroupMembers",
			Handler:    _GroupQueryService_ListGroupMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matcher/matcher.proto",
}

const (
	FindGroupService_FindGroups_FullMethodName = "/matcher.FindGroupService/FindGroups"
)

// FindGroupServiceClient is the client API for FindGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FindGroupService: Recommendations
type FindGroupServiceClient interface {
	FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...grpc.CallOption) (*FindGroupsResponse, error)
}

type findGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFindGroupServiceClient(cc grpc.ClientConnInterface) FindGroupServiceClient {
	return &findGroupServiceClient{cc}
}

func (c *findGroupServiceClient) FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...grpc.CallOption) (*FindGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindGroupsResponse)
	err := c.cc.Invoke(ctx, FindGroupService_FindGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FindGroupServiceServer is the server API for FindGroupService service.
// All implementations must embed UnimplementedFindGroupServiceServer
// for forward compatibility.
//
// FindGroupService: Recommendations
type FindGroupServiceServer interface {
	FindGroups(context.Context, *FindGroupsRequest) (*FindGroupsResponse, error)
	mustEmbedUnimplementedFindGroupServiceServer()
}

// UnimplementedFindGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFindGroupServiceServer struct{}

func (UnimplementedFindGroupServiceServer) FindGroups(context.Context, *FindGroupsRequest) (*FindGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroups not implemented")
}
func (UnimplementedFindGroupServiceServer) mustEmbedUnimplementedFindGroupServiceServer() {}
func (UnimplementedFindGroupServiceServer) testEmbeddedByValue()                          {}

// UnsafeFindGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FindGroupServiceServer will
// result in compilation errors.
type UnsafeFindGroupServiceServer interface {
	mustEmbedUnimplementedFindGroupServiceServer()
}

func RegisterFindGroupServiceServer(s grpc.ServiceRegistrar, srv FindGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedFindGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FindGroupService_ServiceDesc, srv)
}

func _FindGroupService_FindGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindGroupServiceServer).FindGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FindGroupService_FindGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindGroupServiceServer).FindGroups(ctx, req.(*FindGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FindGroupService_ServiceDesc is the grpc.ServiceDesc for FindGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FindGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matcher.FindGroupService",
	HandlerType: (*FindGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGroups",
			Handler:    _FindGroupService_FindGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matcher/matcher.proto",
}

const (
	GroupService_SendJoinRequest_FullMethodName   = "/matcher.GroupService/SendJoinRequest"
	GroupService_AcceptJoinRequest_FullMethodName = "/matcher.GroupService/AcceptJoinRequest"
	GroupService_RejectJoinRequest_FullMethodName = "/matcher.GroupService/RejectJoinRequest"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GroupService: Join requests and management
type GroupServiceClient interface {
	SendJoinRequest(ctx context.Context, in *SendJoinRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptJoinRequest(ctx context.Context, in *AcceptJoinRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RejectJoinRequest(ctx context.Context, in *RejectJoinRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) SendJoinRequest(ctx context.Context, in *SendJoinRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_SendJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AcceptJoinRequest(ctx context.Context, in *AcceptJoinRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_AcceptJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RejectJoinRequest(ctx context.Context, in *RejectJoinRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupService_RejectJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility.
//
// GroupService: Join requests and management
type GroupServiceServer interface {
	SendJoinRequest(context.Context, *SendJoinRequestRequest) (*emptypb.Empty, error)
	AcceptJoinRequest(context.Context, *AcceptJoinRequestRequest) (*emptypb.Empty, error)
	RejectJoinRequest(context.Context, *RejectJoinRequestRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupServiceServer struct{}

func (UnimplementedGroupServiceServer) SendJoinRequest(context.Context, *SendJoinRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJoinRequest not implemented")
}
func (UnimplementedGroupServiceServer) AcceptJoinRequest(context.Context, *AcceptJoinRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptJoinRequest not implemented")
}
func (UnimplementedGroupServiceServer) RejectJoinRequest(context.Context, *RejectJoinRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoinRequest not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}
func (UnimplementedGroupServiceServer) testEmbeddedByValue()                      {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_SendJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendJoinRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SendJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SendJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SendJoinRequest(ctx, req.(*SendJoinRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AcceptJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptJoinRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AcceptJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_AcceptJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AcceptJoinRequest(ctx, req.(*AcceptJoinRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_RejectJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectJoinRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).RejectJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_RejectJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).RejectJoinRequest(ctx, req.(*RejectJoinRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matcher.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendJoinRequest",
			Handler:    _GroupService_SendJoinRequest_Handler,
		},
		{
			MethodName: "AcceptJoinRequest",
			Handler:    _GroupService_AcceptJoinRequest_Handler,
		},
		{
			MethodName: "RejectJoinRequest",
			Handler:    _GroupService_RejectJoinRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matcher/matcher.proto",
}
